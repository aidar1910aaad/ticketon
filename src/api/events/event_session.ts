import { API_BASE } from "@/config/config";



export async function fetchEventSessions(): Promise<any[]> {
    try {
      const response = await fetch(`${API_BASE}/event-sessions`);
      
      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π —Å–æ–±—ã—Ç–∏–π");
      }
  
      const data = await response.json();
      return Array.isArray(data) ? data : [];
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π —Å–æ–±—ã—Ç–∏–π:", error);
      return [];
    }
  }
  
  export async function fetchEventSessionsByEvent(eventId: string): Promise<any[]> {
    try {
      const response = await fetch(`${API_BASE}/event-sessions/search/by-event/${eventId}`);
      
      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π —Å–æ–±—ã—Ç–∏—è");
      }
  
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π —Å–æ–±—ã—Ç–∏—è:", error);
      return [];
    }
  }
  
  export async function createEventSession(sessionData: Record<string, any>, token: string): Promise<any> {
    try {
      if (!token) throw new Error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!");
  
      // üõ† –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–≥–∏–π UTC ISO 8601
      const localDate = new Date(sessionData.startTime);
      const utcDate = new Date(localDate.getTime() - localDate.getTimezoneOffset() * 60000);
      const formattedStartTime = utcDate.toISOString().replace(".000", ""); // ‚ùó –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏
  
      const formData = new FormData();
      formData.append("eventId", sessionData.eventId);
      formData.append("startTime", formattedStartTime); // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      formData.append("price", sessionData.price.toString()); // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
  
      console.log("üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", {
        URL: `${API_BASE}/event-sessions`,
        Headers: { Authorization: `Bearer ${token}` },
        FormData: Object.fromEntries(formData.entries()),
      });
  
      const response = await fetch(`${API_BASE}/event-sessions`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData, // ‚úÖ `Content-Type` –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º, –±—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–∞–º
      });
  
      if (!response.ok) {
        const errorData = await response.text(); // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:", errorData);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${errorData}`);
      }
  
      const result = await response.json();
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è:", result);
      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:", error);
      throw error;
    }
  }
  
  export async function updateEventSession(sessionId: string, sessionData: Record<string, any>, token: string): Promise<any> {
    try {
      const response = await fetch(`${API_BASE}/event-sessions/${sessionId}`, {
        method: "PUT",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(sessionData),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ–±—ã—Ç–∏—è:", errorData);
        throw new Error(errorData.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ–±—ã—Ç–∏—è");
      }
  
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
      throw error;
    }
  }
  
  export async function deleteEventSession(sessionId: string, token: string): Promise<boolean> {
    try {
      const response = await fetch(`${API_BASE}/event-sessions/${sessionId}`, {
        method: "DELETE",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ —Å–æ–±—ã—Ç–∏—è:", errorData);
        throw new Error(errorData.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ–±—ã—Ç–∏—è");
      }
  
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
      throw error;
    }
  }