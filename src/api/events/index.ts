export async function fetchCategories(): Promise<{ id: string; name: string }[]> {
  try {
    const response = await fetch("http://94.232.246.12:8080/api/event-categories");

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
    }

    const data = await response.json();
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    return [];
  }
}

export async function createEvent(eventData: Record<string, any>, token: string): Promise<any> {
  try {
    const formData = new FormData();
    
    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ `FormData`
    Object.keys(eventData).forEach((key) => {
      if (eventData[key]) {
        formData.append(key, eventData[key]);
      }
    });

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è:", Object.fromEntries(formData.entries())); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

    const response = await fetch("http://94.232.246.12:8080/api/events", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:", errorData);
      throw new Error(errorData.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è");
    }

    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    throw error;
  }
}


export async function deleteEvent(eventId: string, token: string): Promise<boolean> {
  try {
    const response = await fetch(`http://94.232.246.12:8080/api/events/${eventId}`, {
      method: "DELETE",
      mode: "cors", // ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º CORS-—Ä–µ–∂–∏–º
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", errorData);
      throw new Error(errorData.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è");
    }

    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    throw error;
  }
}

interface EventResponse {
  content: Event[];
  pageable?: any;
  last?: boolean;
  totalElements?: number;
  totalPages?: number;
}

export async function fetchEvents(): Promise<Event[]> {
  try {
    const response = await fetch("http://94.232.246.12:8080/api/events");

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ${response.statusText}`);
    }

    const data: EventResponse = await response.json();
    console.log("üîπ –û—Ç–≤–µ—Ç API:", data); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

    return data.content || []; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:", error);
    return []; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  }
}

export async function fetchEventById(eventId: string): Promise<any> {
  try {
    const response = await fetch(`http://94.232.246.12:8080/api/events/search/by-id/${eventId}`);

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è: ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    throw error;
  }
}

