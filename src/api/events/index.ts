export async function fetchCategories(): Promise<{ id: string; name: string }[]> {
  try {
    const response = await fetch("http://94.232.246.12:8080/api/event-categories");

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
    }

    const data = await response.json();
    console.log("üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç API:", data);

    if (!Array.isArray(data)) {
      console.error("üî¥ –û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", data);
      return [];
    }

    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    return [];
  }
}
export async function createEvent(eventData: Record<string, any>, token: string): Promise<any> {
  try {
    console.log("üìå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º FormData:", eventData);

    const formData = new FormData();
    formData.append("title", eventData.title ?? "");
    formData.append("description", eventData.description ?? "");
    formData.append("additionalInformation", eventData.additionalInformation ?? "");
    formData.append("categoryId", eventData.categoryID ?? "");
    formData.append("ageRestriction", eventData.ageRestriction ?? "");

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (eventData.backgroundImage) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `File` –≤ `Blob`
      const imageBlob = new Blob([eventData.backgroundImage], { type: eventData.backgroundImage.type });

      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `Blob` –≤ `FormData`
      formData.append("backgroundImage", imageBlob, eventData.backgroundImage.name);
    } else {
      throw new Error("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!");
    }

    console.log("üìå Final FormData –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", Object.fromEntries(formData.entries()));

    const response = await fetch("http://94.232.246.12:8080/api/events", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:", errorData);
      throw new Error(errorData.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è");
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    throw error;
  }
}



export async function deleteEvent(eventId: string, token: string): Promise<boolean> {
  try {
    const response = await fetch(`http://94.232.246.12:8080/api/events/${eventId}`, {
      method: "DELETE",
      mode: "cors",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", errorData);
      throw new Error(errorData.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è");
    }

    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    throw error;
  }
}

interface EventResponse {
  content: Event[];
  pageable?: any;
  last?: boolean;
  totalElements?: number;
  totalPages?: number;
}

export async function fetchEvents(): Promise<Event[]> {
  try {
    const response = await fetch("http://94.232.246.12:8080/api/events");

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ${response.statusText}`);
    }

    const data: EventResponse = await response.json();
    console.log("üîπ –û—Ç–≤–µ—Ç API:", data);

    return data.content || [];
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:", error);
    return [];
  }
}

export async function fetchEventById(eventId: string): Promise<any> {
  try {
    const response = await fetch(`http://94.232.246.12:8080/api/events/search/by-id/${eventId}`);

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è: ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    throw error;
  }
}